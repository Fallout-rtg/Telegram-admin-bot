import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
import json
import os

# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏
TOKEN = "8362532466:AAFpsNARRckyGDHWgy1ztKJRCBlKeWzFxcs"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
ADMIN_ID = 2032240231          # –í–∞—à Telegram ID
MODERATORS = []                # ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
LOG_CHAT_ID = None             # ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

# ‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = "stats.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r') as f:
                return json.load(f)
        except:
            return {"warns": 0, "mutes": 0, "bans": 0}
    return {"warns": 0, "mutes": 0, "bans": 0}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_stats():
    with open(STATS_FILE, 'w') as f:
        json.dump(stats, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
stats = load_stats()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def is_moderator(user_id: int) -> bool:
    return user_id in MODERATORS or is_admin(user_id)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
async def log_action(action: str, username: str, chat: str):
    if LOG_CHAT_ID:
        try:
            await bot.send_message(
                LOG_CHAT_ID,
                f"üìù –î–ï–ô–°–¢–í–ò–ï: {action}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\nüí¨ –ß–∞—Ç: {chat}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /warn, /mute, /ban, /stats.")

# –í–∞—Ä–Ω
@dp.message(Command("warn"))
async def cmd_warn(message: Message):
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not message.reply_to_message:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    user = message.reply_to_message.from_user
    username = user.username or user.first_name
    stats["warns"] += 1
    save_stats()
    await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    await log_action("WARN", username, message.chat.title or "–õ–°")

# –ú—É—Ç
@dp.message(Command("mute"))
async def cmd_mute(message: Message):
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not message.reply_to_message:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    user = message.reply_to_message.from_user
    username = user.username or user.first_name
    chat_title = message.chat.title or "–õ–°"

    try:
        await bot.restrict_chat_member(
            message.chat.id,
            user.id,
            permissions=types.ChatPermissions(can_send_messages=False)
        )
        stats["mutes"] += 1
        save_stats()
        await message.answer(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–º—É—á–µ–Ω.")
        await log_action("MUTE", username, chat_title)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")

# –ë–∞–Ω
@dp.message(Command("ban"))
async def cmd_ban(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é.")
        return
    if not message.reply_to_message:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    user = message.reply_to_message.from_user
    username = user.username or user.first_name
    chat_title = message.chat.title or "–õ–°"

    try:
        await bot.ban_chat_member(message.chat.id, user.id)
        stats["bans"] += 1
        save_stats()
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω.")
        await log_action("BAN", username, chat_title)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚ö†Ô∏è Warns: {stats['warns']}\n"
        f"üîá Mutes: {stats['mutes']}\n"
        f"üö´ Bans: {stats['bans']}"
    )

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())